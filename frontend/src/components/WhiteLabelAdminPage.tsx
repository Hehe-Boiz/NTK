import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Textarea } from './ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Badge } from './ui/badge';
import { Switch } from './ui/switch';
import { Separator } from './ui/separator';
import { useTheme } from './ThemeProvider';
import { useWishes } from './WishesContext';
import { 
  Palette, 
  Settings, 
  Save, 
  RotateCcw, 
  Eye, 
  Code, 
  Download,
  Upload,
  Monitor,
  Smartphone,
  Tablet,
  Globe,
  Users,
  BarChart3,
  Shield,
  Database,
  Cloud,
  History,
  Plus,
  Minus,
  Heart,
  Check,
  X,
  Clock,
  Trash2,
  Calendar,
  User,
  Info
} from 'lucide-react';
import { toast } from 'sonner';
const ColorInput = ({ 
  label, 
  value, 
  onChange, 
  description 
}: { 
  label: string; 
  value: string; 
  onChange: (color: string) => void;
  description?: string;
}) => (
  <div className="space-y-2">

    <Label className="text-sm font-medium">{label}</Label>
    <div className="flex items-center space-x-3">
      <div 
          className="w-12 h-10 rounded-lg border-2 border-border cursor-pointer shadow-sm"
          style={{ backgroundColor: value }}
          onClick={() => {
            // T·∫°o input ·∫©n ƒë·ªÉ m·ªü c√¥ng c·ª• ch·ªçn m√†u
            const input = document.createElement('input');
            input.type = 'color';
            input.value = value;
            input.onchange = (e) => {
              const newColor = (e.target as HTMLInputElement).value;
              onChange(newColor);
            };
            input.click();
          }}
        />
        <Input 
          value={value} 
          onChange={(e) => onChange(e.target.value)}
          className="flex-1 font-mono text-sm"
          placeholder="#000000"
        />
      </div>
    </div>
);
export function WhiteLabelAdminPage() {

  const { theme, updateTheme, resetTheme, isCustomized } = useTheme();
  const { 
    wishes, 
    getPendingWishes, 
    getApprovedWishes, 
    getRejectedWishes,
    approveWish,
    rejectWish,
    deleteWish
  } = useWishes();
  const [activePreview, setActivePreview] = useState('desktop');
  const [changes, setChanges] = useState<any>({});
  const [wishesFilter, setWishesFilter] = useState<'all' | 'pending' | 'approved' | 'rejected'>('pending');

  const handleInputChange = (field: string, value: any) => {
    setChanges({ ...changes, [field]: value });
  };
  
  const handleNestedInputChange = (parent: string, field: string, value: any) => {
    setChanges({
      ...changes,
      [parent]: {
        ...(changes[parent] || theme[parent]),
        [field]: value
      }
    });
  };

  const handleSave = () => {
    updateTheme(changes);
    setChanges({});
    toast.success('C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
  };

  const handleReset = () => {
    resetTheme();
    setChanges({});
    toast.success('ƒê√£ kh√¥i ph·ª•c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh!');
  };

  const exportConfig = () => {
    const config = { ...theme, ...changes };
    const dataStr = JSON.stringify(config, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    
    const exportFileDefaultName = 'white-label-config.json';
    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
    
    toast.success('C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c xu·∫•t th√†nh c√¥ng!');
  };

  const colorPresets = [
    { name: 'Blue Corporate', primary: '#2563eb', secondary: '#f1f5f9', accent: '#e2e8f0' },
    { name: 'Green Healthcare', primary: '#059669', secondary: '#f0fdf4', accent: '#dcfce7' },
    { name: 'Purple Education', primary: '#7c3aed', secondary: '#faf5ff', accent: '#e9d5ff' },
    { name: 'Orange Creative', primary: '#ea580c', secondary: '#fff7ed', accent: '#fed7aa' },
    { name: 'Red Finance', primary: '#dc2626', secondary: '#fef2f2', accent: '#fecaca' },
  ];

  const applyColorPreset = (preset: typeof colorPresets[0]) => {
    const colorChanges = {
        primary: preset.primary,
        secondary: preset.secondary,
        accent: preset.accent
    };
    setChanges({
        ...changes,
        colors: {
            ...(changes.colors || theme.colors),
            ...colorChanges
        }
    });
    toast.success(`üé® ƒê√£ √°p d·ª•ng theme ${preset.name}`);
  };

  const currentTheme = { ...theme, ...changes };
  const currentColors = { ...theme.colors, ...(changes.colors || {}) };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
              <Settings className="h-6 w-6 text-purple-600" />
              <h1 className="text-xl font-semibold">White Label Admin Panel - K·ª∑ ni·ªám 35 nƒÉm</h1>
              {isCustomized && (
                <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">
                  ƒê√£ t√πy ch·ªânh
                </Badge>
              )}
            </div>
            <div className="flex items-center space-x-3">
              <Button variant="outline" onClick={exportConfig}>
                <Download className="h-4 w-4 mr-2" />
                Xu·∫•t c·∫•u h√¨nh
              </Button>
              <Button variant="outline" onClick={handleReset}>
                <RotateCcw className="h-4 w-4 mr-2" />
                Kh√¥i ph·ª•c
              </Button>
              <Button onClick={handleSave} disabled={Object.keys(changes).length === 0}>
                <Save className="h-4 w-4 mr-2" />
                L∆∞u thay ƒë·ªïi
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid lg:grid-cols-3 gap-8">
          {/* Configuration Panel */}
          <div className="lg:col-span-2 space-y-6">
            <Tabs defaultValue="design" className="w-full">
              <TabsList className="grid w-full grid-cols-5">
                <TabsTrigger value="branding">Th∆∞∆°ng hi·ªáu</TabsTrigger>
                <TabsTrigger value="design">Thi·∫øt k·∫ø</TabsTrigger>
                <TabsTrigger value="content">N·ªôi dung</TabsTrigger>
                <TabsTrigger value="wishes">
                  <div className="flex items-center space-x-1">
                    <Heart className="h-3 w-3" />
                    <span>Duy·ªát l·ªùi ch√∫c</span>
                    {getPendingWishes().length > 0 && (
                      <span className="bg-red-500 text-white text-xs rounded-full px-1 min-w-[16px] h-4 flex items-center justify-center">
                        {getPendingWishes().length}
                      </span>
                    )}
                  </div>
                </TabsTrigger>
                <TabsTrigger value="advanced">N√¢ng cao</TabsTrigger>
              </TabsList>

              {/* Branding Tab */}
              <TabsContent value="branding" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <Globe className="h-5 w-5 mr-2" />
                      Th√¥ng tin Th∆∞∆°ng hi·ªáu
                    </CardTitle>
                    <CardDescription>
                      C·∫•u h√¨nh th√¥ng tin c∆° b·∫£n v·ªÅ tr∆∞·ªùng v√† khoa
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="logoText">T√™n khoa</Label>
                        <Input
                          id="logoText"
                          value={currentTheme.logoText}
                          onChange={(e) => handleInputChange('logoText', e.target.value)}
                          placeholder="Khoa C√¥ng ngh·ªá Th√¥ng tin"
                        />
                      </div>
                      <div>
                        <Label htmlFor="universityName">T√™n tr∆∞·ªùng</Label>
                        <Input
                          id="universityName"
                          value={currentTheme.universityName}
                          onChange={(e) => handleInputChange('universityName', e.target.value)}
                          placeholder="Tr∆∞·ªùng ƒê·∫°i h·ªçc XYZ"
                        />
                      </div>
                    </div>
                    
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="establishedYear">NƒÉm th√†nh l·∫≠p</Label>
                        <Input
                          id="establishedYear"
                          value={currentTheme.establishedYear}
                          onChange={(e) => handleInputChange('establishedYear', e.target.value)}
                          placeholder="1990"
                        />
                      </div>
                      <div>
                        <Label htmlFor="phone">ƒêi·ªán tho·∫°i</Label>
                        <Input
                          id="phone"
                          value={currentTheme.contactInfo.phone}
                          onChange={(e) => handleNestedInputChange('contactInfo', 'phone', e.target.value)}
                          placeholder="(028) 1234 5678"
                        />
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="motto">Kh·∫©u hi·ªáu</Label>
                      <Textarea
                        id="motto"
                        value={currentTheme.motto}
                        onChange={(e) => handleInputChange('motto', e.target.value)}
                        placeholder="35 nƒÉm ƒë·ªìng h√†nh c√πng s·ª± ph√°t tri·ªÉn..."
                        rows={3}
                      />
                    </div>

                    <div>
                      <Label htmlFor="address">ƒê·ªãa ch·ªâ</Label>
                      <Textarea
                        id="address"
                        value={currentTheme.contactInfo.address}
                        onChange={(e) => handleNestedInputChange('contactInfo', 'address', e.target.value)}
                        placeholder="123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM"
                        rows={2}
                      />
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Design Tab */}
              <TabsContent value="design" className="space-y-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    {/* B·∫£ng m√†u t√πy ch·ªânh */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center space-x-2">
                          <div className="w-2 h-2 bg-pink-500 rounded-full"></div>
                          <span>B·∫£ng M√†u</span>
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <ColorInput 
                          label="M√†u Ch√≠nh (Primary)"
                          value={currentColors.primary}
                          onChange={(color) => handleNestedInputChange('colors', 'primary', color)}
                          description="M√†u ch√≠nh ƒë∆∞·ª£c s·ª≠ d·ª•ng cho c√°c button, link v√† elements quan tr·ªçng"
                        />
                        <ColorInput 
                          label="M√†u Ph·ª• (Secondary)"
                          value={currentColors.secondary}
                          onChange={(color) => handleNestedInputChange('colors', 'secondary', color)}
                          description="M√†u ph·ª• cho background sections v√† subtle elements"
                        />
                        <ColorInput 
                          label="M√†u Nh·∫•n (Accent)"
                          value={currentColors.accent}
                          onChange={(color) => handleNestedInputChange('colors', 'accent', color)}
                          description="M√†u nh·∫•n cho hover effects v√† highlights"
                        />
                        <ColorInput 
                          label="M√†u N·ªÅn (Background)"
                          value={currentColors.background}
                          onChange={(color) => handleNestedInputChange('colors', 'background', color)}
                          description="M√†u n·ªÅn ch√≠nh c·ªßa website"
                        />
                      </CardContent>
                    </Card>

                    {/* B·ªô m√†u c√≥ s·∫µn */}
                    <Card>
                      <CardHeader>
                        <CardTitle className="text-base flex items-center space-x-2">
                          <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                          <span>B·ªô M√†u C√≥ S·∫µn</span>
                        </CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-3">
                        {colorPresets.map((preset, index) => (
                          <div key={index} className="flex items-center justify-between p-3 border rounded-lg hover:bg-muted/50 transition-colors">
                            <div className="flex items-center space-x-3">
                              <div className="flex space-x-1">
                               <div className="w-4 h-4 rounded-full  shadow-sm" style={{ backgroundColor: preset.primary }}></div>
                               <div className="w-4 h-4 rounded-full  shadow-sm" style={{ backgroundColor: preset.secondary }}></div>
                               <div className="w-4 h-4 rounded-full shadow-sm" style={{ backgroundColor: preset.accent }}></div> 
                              </div>
                              <span className="text-sm font-medium">{preset.name}</span>
                            </div>
                            <Button 
                              size="sm" 
                              variant="outline"
                              onClick={() => applyColorPreset(preset)}
                              className="text-xs"
                            >
                              √Åp D·ª•ng
                            </Button>
                          </div>
                        ))}
                      </CardContent>
                    </Card>
                </div>
              </TabsContent>

              {/* Content Tab */}
              <TabsContent value="content" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <Code className="h-5 w-5 mr-2" />
                      N·ªôi dung K·ª∑ ni·ªám 35 nƒÉm
                    </CardTitle>
                    <CardDescription>
                      C·∫•u h√¨nh n·ªôi dung chuy√™n bi·ªát cho k·ª∑ ni·ªám 35 nƒÉm th√†nh l·∫≠p
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="anniversaryYear">NƒÉm k·ª∑ ni·ªám</Label>
                        <Input
                          id="anniversaryYear"
                          value={currentTheme.anniversaryYear}
                          onChange={(e) => handleInputChange('anniversaryYear', e.target.value)}
                          placeholder="2025"
                        />
                      </div>
                      <div>
                        <Label htmlFor="anniversarySlogan">Slogan k·ª∑ ni·ªám</Label>
                        <Input
                          id="anniversarySlogan"
                          value={currentTheme.anniversarySlogan}
                          onChange={(e) => handleInputChange('anniversarySlogan', e.target.value)}
                          placeholder="35 nƒÉm ki·∫øn t·∫°o t∆∞∆°ng lai s·ªë"
                        />
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="mission">S·ª© m·ªánh</Label>
                      <Textarea
                        id="mission"
                        value={currentTheme.mission}
                        onChange={(e) => handleInputChange('mission', e.target.value)}
                        placeholder="S·ª© m·ªánh c·ªßa khoa..."
                        rows={4}
                      />
                    </div>

                    <div>
                      <Label htmlFor="vision">T·∫ßm nh√¨n</Label>
                      <Textarea
                        id="vision"
                        value={currentTheme.vision}
                        onChange={(e) => handleInputChange('vision', e.target.value)}
                        placeholder="T·∫ßm nh√¨n c·ªßa khoa..."
                        rows={4}
                      />
                    </div>

                    <div>
                      <Label htmlFor="coreValues">Gi√° tr·ªã c·ªët l√µi</Label>
                      <Input
                        id="coreValues"
                        value={currentTheme.coreValues}
                        onChange={(e) => handleInputChange('coreValues', e.target.value)}
                        placeholder="Ch·∫•t l∆∞·ª£ng - ƒê·ªïi m·ªõi - H·ª£p t√°c - Ph√°t tri·ªÉn b·ªÅn v·ªØng"
                      />
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <History className="h-5 w-5 mr-2" />
                      C√¢y L·ªãch s·ª≠ 35 nƒÉm
                    </CardTitle>
                    <CardDescription>
                      Ch·ªânh s·ª≠a c√°c m·ªëc quan tr·ªçng trong l·ªãch s·ª≠ 35 nƒÉm ph√°t tri·ªÉn
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {currentTheme.milestones.map((milestone: any, index: number) => (
                        <div key={index} className="border rounded-lg p-4 bg-gray-50">
                          <div className="grid md:grid-cols-4 gap-4">
                            <div>
                              <Label>NƒÉm</Label>
                              <Input
                                value={milestone.year}
                                onChange={(e) => {
                                  const newMilestones = [...currentTheme.milestones];
                                  newMilestones[index] = { ...milestone, year: e.target.value };
                                  handleInputChange('milestones', newMilestones);
                                }}
                                placeholder="2000"
                              />
                            </div>
                            <div>
                              <Label>Ti√™u ƒë·ªÅ</Label>
                              <Input
                                value={milestone.title}
                                onChange={(e) => {
                                  const newMilestones = [...currentTheme.milestones];
                                  newMilestones[index] = { ...milestone, title: e.target.value };
                                  handleInputChange('milestones', newMilestones);
                                }}
                                placeholder="S·ª± ki·ªán quan tr·ªçng"
                              />
                            </div>
                            <div>
                              <Label>Icon</Label>
                              <select
                                className="w-full p-2 border rounded-md"
                                value={milestone.icon}
                                onChange={(e) => {
                                  const newMilestones = [...currentTheme.milestones];
                                  newMilestones[index] = { ...milestone, icon: e.target.value };
                                  handleInputChange('milestones', newMilestones);
                                }}
                              >
                                <option value="Building">üè¢ Building</option>
                                <option value="GraduationCap">üéì GraduationCap</option>
                                <option value="Globe">üåç Globe</option>
                                <option value="Award">üèÜ Award</option>
                                <option value="Lightbulb">üí° Lightbulb</option>
                                <option value="TrendingUp">üìà TrendingUp</option>
                                <option value="Target">üéØ Target</option>
                                <option value="Trophy">üèÜ Trophy</option>
                                <option value="Users">üë• Users</option>
                                <option value="BookOpen">üìñ BookOpen</option>
                                <option value="Star">‚≠ê Star</option>
                              </select>
                            </div>
                            <div className="md:col-span-4">
                              <Label>M√¥ t·∫£</Label>
                              <Textarea
                                value={milestone.description}
                                onChange={(e) => {
                                  const newMilestones = [...currentTheme.milestones];
                                  newMilestones[index] = { ...milestone, description: e.target.value };
                                  handleInputChange('milestones', newMilestones);
                                }}
                                placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·ª± ki·ªán..."
                                rows={2}
                              />
                            </div>
                          </div>
                          <div className="flex justify-end mt-4">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => {
                                const newMilestones = [...currentTheme.milestones];
                                newMilestones.splice(index, 1);
                                handleInputChange('milestones', newMilestones);
                              }}
                            >
                              <Minus className="h-4 w-4 mr-2" />
                              X√≥a m·ªëc n√†y
                            </Button>
                          </div>
                        </div>
                      ))}
                      
                      <Button
                        variant="outline"
                        onClick={() => {
                          const newMilestone = {
                            year: new Date().getFullYear().toString(),
                            title: 'S·ª± ki·ªán m·ªõi',
                            description: 'M√¥ t·∫£ s·ª± ki·ªán m·ªõi',
                            icon: 'Star'
                          };
                          const newMilestones = [...currentTheme.milestones, newMilestone];
                          handleInputChange('milestones', newMilestones);
                        }}
                        className="w-full"
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        Th√™m m·ªëc m·ªõi
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Wishes Management Tab */}
              <TabsContent value="wishes" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      <div className="flex items-center">
                        <Heart className="h-5 w-5 mr-2" />
                        Qu·∫£n l√Ω L·ªùi ch√∫c K·ª∑ ni·ªám
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline" className="text-xs">
                          T·ªïng: {wishes.length}
                        </Badge>
                        <Badge variant="secondary" className="text-xs bg-yellow-100 text-yellow-800">
                          Ch·ªù duy·ªát: {getPendingWishes().length}
                        </Badge>
                        <Badge variant="secondary" className="text-xs bg-green-100 text-green-800">
                          ƒê√£ duy·ªát: {getApprovedWishes().length}
                        </Badge>
                        <Badge variant="secondary" className="text-xs bg-red-100 text-red-800">
                          T·ª´ ch·ªëi: {getRejectedWishes().length}
                        </Badge>
                      </div>
                    </CardTitle>
                    <CardDescription>
                      Duy·ªát v√† qu·∫£n l√Ω c√°c l·ªùi ch√∫c t·ª´ sinh vi√™n, c·ª±u sinh vi√™n v√† ƒë·ªëi t√°c
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {/* Filter Tabs */}
                    <div className="flex space-x-2 mb-6">
                      <Button
                        variant={wishesFilter === 'pending' ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setWishesFilter('pending')}
                        className="flex items-center space-x-1"
                      >
                        <Clock className="h-3 w-3" />
                        <span>Ch·ªù duy·ªát ({getPendingWishes().length})</span>
                      </Button>
                      <Button
                        variant={wishesFilter === 'approved' ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setWishesFilter('approved')}
                        className="flex items-center space-x-1"
                      >
                        <Check className="h-3 w-3" />
                        <span>ƒê√£ duy·ªát ({getApprovedWishes().length})</span>
                      </Button>
                      <Button
                        variant={wishesFilter === 'rejected' ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setWishesFilter('rejected')}
                        className="flex items-center space-x-1"
                      >
                        <X className="h-3 w-3" />
                        <span>T·ª´ ch·ªëi ({getRejectedWishes().length})</span>
                      </Button>
                      <Button
                        variant={wishesFilter === 'all' ? 'default' : 'outline'}
                        size="sm"
                        onClick={() => setWishesFilter('all')}
                      >
                        T·∫•t c·∫£ ({wishes.length})
                      </Button>
                    </div>

                    {/* Wishes List */}
                    <div className="space-y-4 max-h-96 overflow-y-auto">
                      {(() => {
                        let filteredWishes = wishes;
                        switch (wishesFilter) {
                          case 'pending':
                            filteredWishes = getPendingWishes();
                            break;
                          case 'approved':
                            filteredWishes = getApprovedWishes();
                            break;
                          case 'rejected':
                            filteredWishes = getRejectedWishes();
                            break;
                          default:
                            filteredWishes = wishes;
                        }

                        if (filteredWishes.length === 0) {
                          return (
                            <div className="text-center py-8 text-gray-500">
                              <Heart className="h-12 w-12 mx-auto mb-4 opacity-30" />
                              <p>Kh√¥ng c√≥ l·ªùi ch√∫c n√†o trong danh m·ª•c n√†y</p>
                            </div>
                          );
                        }

                        return filteredWishes.map((wish) => (
                          <div
                            key={wish.id}
                            className={`border rounded-lg p-4 space-y-3 ${
                              wish.status === 'pending' ? 'border-yellow-200 bg-yellow-50' :
                              wish.status === 'approved' ? 'border-green-200 bg-green-50' :
                              'border-red-200 bg-red-50'
                            }`}
                          >
                            {/* Status Badge */}
                            <div className="flex items-center justify-between">
                              <Badge
                                variant="secondary"
                                className={
                                  wish.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                  wish.status === 'approved' ? 'bg-green-100 text-green-800' :
                                  'bg-red-100 text-red-800'
                                }
                              >
                                {wish.status === 'pending' && <Clock className="h-3 w-3 mr-1" />}
                                {wish.status === 'approved' && <Check className="h-3 w-3 mr-1" />}
                                {wish.status === 'rejected' && <X className="h-3 w-3 mr-1" />}
                                {wish.status === 'pending' ? 'Ch·ªù duy·ªát' :
                                 wish.status === 'approved' ? 'ƒê√£ duy·ªát' : 'T·ª´ ch·ªëi'}
                              </Badge>
                              
                              <div className="flex items-center space-x-2 text-xs text-gray-500">
                                <Calendar className="h-3 w-3" />
                                <span>
                                  {new Intl.DateTimeFormat('vi-VN', {
                                    day: '2-digit',
                                    month: '2-digit',
                                    year: 'numeric',
                                    hour: '2-digit',
                                    minute: '2-digit'
                                  }).format(wish.timestamp)}
                                </span>
                              </div>
                            </div>

                            {/* Wish Content */}
                            <div className="space-y-2">
                              <p className="text-gray-800 leading-relaxed">
                                "{wish.content}"
                              </p>
                              <div className="flex items-center space-x-2 text-sm text-gray-600">
                                <User className="h-4 w-4" />
                                <span className="font-medium">{wish.author}</span>
                                <span className="text-gray-400">‚Ä¢</span>
                                <span className="text-xs text-gray-500">ID: {wish.authorId}</span>
                              </div>
                            </div>

                            {/* Action Buttons */}
                            <div className="flex items-center justify-end space-x-2 pt-2 border-t">
                              {wish.status === 'pending' && (
                                <>
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    onClick={() => {
                                      approveWish(wish.id);
                                      toast.success(`ƒê√£ duy·ªát l·ªùi ch√∫c c·ªßa ${wish.author}`);
                                    }}
                                    className="text-green-600 border-green-200 hover:bg-green-50"
                                  >
                                    <Check className="h-3 w-3 mr-1" />
                                    Duy·ªát
                                  </Button>
                                  <Button
                                    size="sm"
                                    variant="outline"
                                    onClick={() => {
                                      rejectWish(wish.id);
                                      toast.success(`ƒê√£ t·ª´ ch·ªëi l·ªùi ch√∫c c·ªßa ${wish.author}`);
                                    }}
                                    className="text-red-600 border-red-200 hover:bg-red-50"
                                  >
                                    <X className="h-3 w-3 mr-1" />
                                    T·ª´ ch·ªëi
                                  </Button>
                                </>
                              )}
                              
                              {wish.status === 'approved' && (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => {
                                    rejectWish(wish.id);
                                    toast.success(`ƒê√£ chuy·ªÉn l·ªùi ch√∫c c·ªßa ${wish.author} sang tr·∫°ng th√°i t·ª´ ch·ªëi`);
                                  }}
                                  className="text-red-600 border-red-200 hover:bg-red-50"
                                >
                                  <X className="h-3 w-3 mr-1" />
                                  Thu h·ªìi
                                </Button>
                              )}
                              
                              {wish.status === 'rejected' && (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => {
                                    approveWish(wish.id);
                                    toast.success(`ƒê√£ duy·ªát l·∫°i l·ªùi ch√∫c c·ªßa ${wish.author}`);
                                  }}
                                  className="text-green-600 border-green-200 hover:bg-green-50"
                                >
                                  <Check className="h-3 w-3 mr-1" />
                                  Duy·ªát l·∫°i
                                </Button>
                              )}
                              
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a vƒ©nh vi·ªÖn l·ªùi ch√∫c c·ªßa ${wish.author}?`)) {
                                    deleteWish(wish.id);
                                    toast.success(`ƒê√£ x√≥a l·ªùi ch√∫c c·ªßa ${wish.author}`);
                                  }
                                }}
                                className="text-gray-600 border-gray-200 hover:bg-gray-50"
                              >
                                <Trash2 className="h-3 w-3 mr-1" />
                                X√≥a
                              </Button>
                            </div>
                          </div>
                        ));
                      })()}
                    </div>

                    {/* Quick Actions */}
                    {getPendingWishes().length > 0 && (
                      <div className="border-t pt-4 mt-6">
                        <div className="flex items-center justify-between">
                          <span className="text-sm text-gray-600">
                            Thao t√°c nhanh v·ªõi {getPendingWishes().length} l·ªùi ch√∫c ƒëang ch·ªù:
                          </span>
                          <div className="flex items-center space-x-2">
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => {
                                getPendingWishes().forEach(wish => approveWish(wish.id));
                                toast.success(`ƒê√£ duy·ªát t·∫•t c·∫£ ${getPendingWishes().length} l·ªùi ch√∫c`);
                              }}
                              className="text-green-600 border-green-200 hover:bg-green-50"
                            >
                              <Check className="h-3 w-3 mr-1" />
                              Duy·ªát t·∫•t c·∫£
                            </Button>
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => {
                                if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·ª´ ch·ªëi t·∫•t c·∫£ ${getPendingWishes().length} l·ªùi ch√∫c ƒëang ch·ªù?`)) {
                                  getPendingWishes().forEach(wish => rejectWish(wish.id));
                                  toast.success(`ƒê√£ t·ª´ ch·ªëi t·∫•t c·∫£ l·ªùi ch√∫c`);
                                }
                              }}
                              className="text-red-600 border-red-200 hover:bg-red-50"
                            >
                              <X className="h-3 w-3 mr-1" />
                              T·ª´ ch·ªëi t·∫•t c·∫£
                            </Button>
                          </div>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Advanced Tab */}
              <TabsContent value="advanced" className="space-y-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center">
                      <Shield className="h-5 w-5 mr-2" />
                      C√†i ƒë·∫∑t N√¢ng cao
                    </CardTitle>
                    <CardDescription>
                      C√°c t√πy ch·ªçn n√¢ng cao cho chuy√™n gia
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 gap-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <Label>Analytics Integration</Label>
                          <p className="text-sm text-gray-600">K√≠ch ho·∫°t Google Analytics</p>
                        </div>
                        <Switch />
                      </div>
                      <div className="flex items-center justify-between">
                        <div>
                          <Label>SEO Optimization</Label>
                          <p className="text-sm text-gray-600">T·ªëi ∆∞u h√≥a SEO t·ª± ƒë·ªông</p>
                        </div>
                        <Switch defaultChecked />
                      </div>
                      <div className="flex items-center justify-between">
                        <div>
                          <Label>Performance Monitoring</Label>
                          <p className="text-sm text-gray-600">Gi√°m s√°t hi·ªáu su·∫•t website</p>
                        </div>
                        <Switch />
                      </div>
                      <div className="flex items-center justify-between">
                        <div>
                          <Label>Anniversary Mode</Label>
                          <p className="text-sm text-gray-600">K√≠ch ho·∫°t ch·∫ø ƒë·ªô k·ª∑ ni·ªám ƒë·∫∑c bi·ªát</p>
                        </div>
                        <Switch defaultChecked />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>

          {/* Preview Panel */}
          <div className="lg:col-span-1">
            <Card className="sticky top-24">
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center">
                    <Eye className="h-5 w-5 mr-2" />
                    Xem tr∆∞·ªõc
                  </span>
                  <div className="flex items-center space-x-1">
                    <Button
                      variant={activePreview === 'desktop' ? 'default' : 'ghost'}
                      size="sm"
                      onClick={() => setActivePreview('desktop')}
                    >
                      <Monitor className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={activePreview === 'tablet' ? 'default' : 'ghost'}
                      size="sm"
                      onClick={() => setActivePreview('tablet')}
                    >
                      <Tablet className="h-4 w-4" />
                    </Button>
                    <Button
                      variant={activePreview === 'mobile' ? 'default' : 'ghost'}
                      size="sm"
                      onClick={() => setActivePreview('mobile')}
                    >
                      <Smartphone className="h-4 w-4" />
                    </Button>
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className={`border rounded-lg overflow-hidden bg-white ${
                  activePreview === 'desktop' ? 'w-full h-64' :
                  activePreview === 'tablet' ? 'w-3/4 h-48 mx-auto' :
                  'w-1/2 h-40 mx-auto'
                }`}>
                  <div 
                    className="p-4 h-full relative"
                    style={{
                      backgroundColor: currentColors.background,
                    }}
                  >
                    <div 
                      className="font-bold mb-2"
                      style={{ color: currentColors.primary }}
                    >
                      {currentTheme.logoText}
                    </div>
                    <div className="text-sm opacity-70 mb-3">
                      {currentTheme.universityName}
                    </div>
                    <div className="text-xs leading-relaxed">
                      {currentTheme.motto}
                    </div>
                    <div 
                      className="absolute bottom-2 right-2 w-4 h-4 rounded-full"
                      style={{ backgroundColor: currentColors.accent }}
                    ></div>
                     <div 
                      className="absolute bottom-2 right-8 w-4 h-4 rounded-lg"
                      style={{ backgroundColor: currentColors.secondary }}
                    ></div>
                  </div>
                </div>
                
                <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                  <h4 className="font-semibold mb-2 text-blue-900">üí° H∆∞·ªõng d·∫´n</h4>
                  <ul className="text-sm text-blue-700 space-y-1">
                    <li>‚Ä¢ Thay ƒë·ªïi m√†u s·∫Øc ƒë·ªÉ ph√π h·ª£p v·ªõi th∆∞∆°ng hi·ªáu</li>
                    <li>‚Ä¢ C·∫≠p nh·∫≠t n·ªôi dung trong tab "N·ªôi dung"</li>
                    <li>‚Ä¢ Ch·ªânh s·ª≠a l·ªãch s·ª≠ 35 nƒÉm ph√°t tri·ªÉn</li>
                    <li>‚Ä¢ Nh·ªõ nh·∫•n "L∆∞u thay ƒë·ªïi" sau khi ch·ªânh s·ª≠a</li>
                  </ul>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}